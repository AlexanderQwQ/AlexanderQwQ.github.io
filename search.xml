<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pytorch 入门</title>
    <url>/2024/10/31/conda/</url>
    <content><![CDATA[<h2 id="详细内容教学视频请移步"><a href="#详细内容教学视频请移步" class="headerlink" title="详细内容教学视频请移步"></a>详细内容教学视频请移步</h2><p><a href="https://www.bilibili.com/video/BV1hE411t7RN/">PyTorch深度学习快速入门教程（绝对通俗易懂！）【小土堆】</a></p>
<h2 id="更简单易懂的请参考龙哥的Blog"><a href="#更简单易懂的请参考龙哥的Blog" class="headerlink" title="更简单易懂的请参考龙哥的Blog"></a>更简单易懂的请参考龙哥的Blog</h2><p><a href="https://kuaimiaoda.cn/cuda/">pytorch+CUDA 安装教程</a></p>
<h2 id="Anaconda环境的创建和切换"><a href="#Anaconda环境的创建和切换" class="headerlink" title="Anaconda环境的创建和切换"></a>Anaconda环境的创建和切换</h2><ol>
<li>打开 Win-&gt;Anaoconda3-&gt;Anaconda Prompt</li>
<li>命令行 conda create -n <strong>pytorch(名字)</strong> python&#x3D;3.6</li>
<li>激活环境 conda activate <strong>pytorch(名字)</strong></li>
</ol>
<h2 id="Cuda环境的配置和安装"><a href="#Cuda环境的配置和安装" class="headerlink" title="Cuda环境的配置和安装"></a>Cuda环境的配置和安装</h2><ol>
<li>查看GPU型号 nvidia-smi</li>
<li>检验 python,import torch,torch.cuda.is_availiable()</li>
<li>返回 True</li>
</ol>
<h2 id="Python学习的两大法宝"><a href="#Python学习的两大法宝" class="headerlink" title="Python学习的两大法宝"></a>Python学习的两大法宝</h2><ol>
<li>dir(pytorch.__):用来打开某一个包，展示出内部分区。</li>
<li>help(__):用来查看该分区内部某一工具的使用说明。</li>
</ol>
<h2 id="随笔写一些学到的Pycharm小tips"><a href="#随笔写一些学到的Pycharm小tips" class="headerlink" title="随笔写一些学到的Pycharm小tips"></a>随笔写一些学到的Pycharm小tips</h2><ol>
<li>shift + enter会跳转至下一行的句首</li>
<li></li>
</ol>
<h2 id="Pytorch-中如何加载数据"><a href="#Pytorch-中如何加载数据" class="headerlink" title="Pytorch 中如何加载数据"></a>Pytorch 中如何加载数据</h2>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/10/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Deeplearning</title>
    <url>/2024/10/31/deeplearning/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Transformer</title>
    <url>/2024/10/30/transformer/</url>
    <content><![CDATA[<h1 id="Transformer模型详解"><a href="#Transformer模型详解" class="headerlink" title="Transformer模型详解"></a>Transformer模型详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Transformer由论文 <strong>《Attention is All You Need》</strong> 提出，现在是谷歌云TPU推荐的参考模型。论文相关的Tensorflow的代码可以从GitHub获取，其作为Tensor2Tensor包的一部分。哈佛的NLP团队也实现了一个基于PyTorch的版本，并注释该论文。<br>在本文中，我们将试图把模型简化一点，并逐一介绍里面的核心概念，希望让普通读者也能轻易理解。</p>
<h2 id="Transformer-整体结构"><a href="#Transformer-整体结构" class="headerlink" title="Transformer 整体结构"></a>Transformer 整体结构</h2><p>首先介绍 Transformer 的整体结构，下图是 Transformer 用于中英文翻译的整体结构：</p>
<p><a href="https://imgse.com/i/pAwslg1"><img src="https://s21.ax1x.com/2024/10/25/pAwslg1.png" alt="pAwslg1.png"></a></p>
<p>可以看到 Transformer 由 Encoder 和 Decoder 两个部分组成，Encoder 和 Decoder 都包含 6 个 block。Transformer 的工作流程大体如下：<br>第一步获取输入句子的每一个单词的表示向量 X，X由单词的 Embedding（Embedding就是从原始数据提取出来的Feature） 和单词位置的 Embedding 相加得到。<br><a href="https://imgse.com/i/pAB0eSI"><img src="https://s21.ax1x.com/2024/10/30/pAB0eSI.png" alt="pAB0eSI.png"></a></p>
<p>第二步将得到的单词表示向量矩阵 (如上图所示，每一行是一个单词的表示 x) 传入 Encoder 中，经过 6 个 Encoder block 后可以得到句子所有单词的编码信息矩阵 C，如下图。单词向量矩阵用  表示， n 是句子中单词个数，d 是表示向量的维度 (论文中 d&#x3D;512)。每一个 Encoder block 输出的矩阵维度与输入完全一致。<br><a href="https://imgse.com/i/pAB0Mm8"><img src="https://s21.ax1x.com/2024/10/30/pAB0Mm8.png" alt="pAB0Mm8.png"></a></p>
<p>第三步：将 Encoder 输出的编码信息矩阵 C传递到 Decoder 中，Decoder 依次会根据当前翻译过的单词 1~ i 翻译下一个单词 i+1，如下图所示。在使用的过程中，翻译到单词 i+1 的时候需要通过 Mask (掩盖) 操作遮盖住 i+1 之后的单词。<br><a href="https://imgse.com/i/pAB08Yj"><img src="https://s21.ax1x.com/2024/10/30/pAB08Yj.png" alt="pAB08Yj.png"></a></p>
<p>上图 Decoder 接收了 Encoder 的编码矩阵 C，然后首先输入一个翻译开始符 “”，预测第一个单词 “I”；然后输入翻译开始符 “” 和单词 “I”，预测单词 “have”，以此类推。这是 Transformer 使用时候的大致流程，接下来是里面各个部分的细节。</p>
<h2 id="Transformer-的输入"><a href="#Transformer-的输入" class="headerlink" title="Transformer 的输入"></a>Transformer 的输入</h2><p>Transformer 中单词的输入表示 x由单词 Embedding 和位置 Embedding （Positional Encoding）相加得到。<br><a href="https://imgse.com/i/pAB0tlq"><img src="https://s21.ax1x.com/2024/10/30/pAB0tlq.png" alt="pAB0tlq.png"></a></p>
<h3 id="Word-Embedding"><a href="#Word-Embedding" class="headerlink" title="Word Embedding"></a>Word Embedding</h3><p>单词的 Embedding 有很多种方式可以获取，例如可以采用 Word2Vec、Glove 等算法预训练得到，也可以在 Transformer 中训练得到。</p>
<h3 id="Positional-Embedding"><a href="#Positional-Embedding" class="headerlink" title="Positional Embedding"></a>Positional Embedding</h3><p>Transformer 中除了单词的 Embedding，还需要使用Positional Embedding 表示单词出现在句子中的位置。 <strong>因为 Transformer 不采用 RNN 的结构，而是使用全局信息，不能利用单词的顺序信息，而这部分信息对于 NLP 来说非常重要。</strong> 所以 Transformer 中使用Positional Embedding 保存单词在序列中的相对或绝对位置。</p>
<p>Positional Embedding 用 PE表示，PE 的维度与单词 Embedding 是一样的。PE 可以通过训练得到，也可以使用某种公式计算得到。在 Transformer 中采用了后者，计算公式如下：<br><a href="https://imgse.com/i/pAwsWCj"><img src="https://s21.ax1x.com/2024/10/25/pAwsWCj.png" alt="pAwsWCj.png"></a></p>
<p>其中，pos 表示单词在句子中的位置，d 表示 PE的维度 (与词 Embedding 一样)，2i 表示偶数的维度，2i+1 表示奇数维度 (即 2i≤d, 2i+1≤d)。使用这种公式计算 PE 有以下的好处：</p>
<ul>
<li>使 PE 能够适应比训练集里面所有句子更长的句子，假设训练集里面最长的句子是有 20 个单词，突然来了一个长度为 21 的句子，则使用公式计算的方法可以计算出第 21 位的 Embedding。</li>
<li>可以让模型容易地计算出相对位置，对于固定长度的间距 k，<strong>PE(pos+k)</strong> 可以用 <strong>PE(pos)</strong> 计算得到。因为 Sin(A+B) &#x3D; Sin(A)Cos(B) + Cos(A)Sin(B), Cos(A+B) &#x3D; Cos(A)Cos(B) - Sin(A)Sin(B)。</li>
</ul>
<p>将单词的Word Embedding 和Positional Embedding 相加，就可以得到单词的表示向量 x，x 就是 Transformer 的输入。</p>
<h2 id="Self-Attention（自注意力机制）"><a href="#Self-Attention（自注意力机制）" class="headerlink" title="Self-Attention（自注意力机制）"></a>Self-Attention（自注意力机制）</h2><p><a href="https://imgse.com/i/pAB5XDg"><img src="https://s21.ax1x.com/2024/10/30/pAB5XDg.png" alt="pAB5XDg.png"></a></p>
<p>上图是论文中 Transformer 的内部结构图，左侧为 Encoder block，右侧为 Decoder block。红色圈中的部分为 Multi-Head Attention，是由多个 Self-Attention组成的，可以看到 Encoder block 包含一个 Multi-Head Attention，而 Decoder block 包含两个 Multi-Head Attention (其中有一个用到 Masked)。Multi-Head Attention 上方还包括一个 Add &amp; Norm 层，Add 表示残差连接 (Residual Connection) 用于防止网络退化，Norm 表示 Layer Normalization，用于对每一层的激活值进行归一化。</p>
<p>因为 Self-Attention是 Transformer 的重点，所以我们重点关注 Multi-Head Attention 以及 Self-Attention，首先详细了解一下 Self-Attention 的内部逻辑。</p>
<h3 id="Self-Attention-结构"><a href="#Self-Attention-结构" class="headerlink" title="Self-Attention 结构"></a>Self-Attention 结构</h3><p><a href="https://imgse.com/i/pAB5xEj"><img src="https://s21.ax1x.com/2024/10/30/pAB5xEj.png" alt="pAB5xEj.png"></a></p>
<p>上图是 Self-Attention 的结构，在计算的时候需要用到矩阵Q(查询),K(键值),V(值)。在实际中，Self-Attention 接收的是输入(单词的表示向量x组成的矩阵X) 或者上一个 Encoder block 的输出。而Q,K,V正是通过 Self-Attention 的输入进行线性变换得到的。</p>
<h3 id="Q-K-V-的计算"><a href="#Q-K-V-的计算" class="headerlink" title="Q, K, V 的计算"></a>Q, K, V 的计算</h3><p>Self-Attention 的输入用矩阵X进行表示，则可以使用线性变阵矩阵<strong>WQ,WK,WV</strong>计算得到<strong>Q,K,V</strong>。计算如下图所示，<strong>注意 X, Q, K, V 的每一行都表示一个单词</strong>。<br><a href="https://imgse.com/i/pABI9Cq"><img src="https://s21.ax1x.com/2024/10/30/pABI9Cq.png" alt="pABI9Cq.png"></a></p>
<h3 id="Self-Attention-的输出"><a href="#Self-Attention-的输出" class="headerlink" title="Self-Attention 的输出"></a>Self-Attention 的输出</h3><p>得到矩阵 Q, K, V之后就可以计算出 Self-Attention 的输出了，计算的公式如下：<br><a href="https://imgse.com/i/pABIP2V"><img src="https://s21.ax1x.com/2024/10/30/pABIP2V.png" alt="pABIP2V.png"></a></p>
<p>公式中计算矩阵Q和K每一行向量的内积，为了防止内积过大，因此除以$d_k$  的平方根。Q乘以K的转置后，得到的矩阵行列数都为 n，n 为句子单词数，这个矩阵可以表示单词之间的 attention 强度。下图为Q乘以 $K^T$ ，1234 表示的是句子中的单词。<br><a href="https://imgse.com/i/pABIivT"><img src="https://s21.ax1x.com/2024/10/30/pABIivT.png" alt="pABIivT.png"></a></p>
<p>得到Q$K^T$ 之后，使用 Softmax 计算每一个单词对于其他单词的 attention 系数，公式中的 Softmax 是对矩阵的每一行进行 Softmax，即每一行的和都变为 1.<br><a href="https://imgse.com/i/pABIkKU"><img src="https://s21.ax1x.com/2024/10/30/pABIkKU.png" alt="pABIkKU.png"></a></p>
<p>得到 Softmax 矩阵之后可以和V相乘，得到最终的输出Z。<br><a href="https://imgse.com/i/pABIEb4"><img src="https://s21.ax1x.com/2024/10/30/pABIEb4.png" alt="pABIEb4.png"></a></p>
<p>上图中 Softmax 矩阵的第 1 行表示单词 1 与其他所有单词的 attention 系数，最终单词 1 的输出 $Z_1$ 等于所有单词 i 的值得到 8 个输出矩阵  到  之后，Multi-Head Attention 将它们拼接在一起 (Concat)，然后传入一个Linear层，得到 Multi-Head Attention 最终的输出Z。 根据 attention 系数的比例加在一起得到，如下图所示：<br><img src="https://s2.loli.net/2024/10/30/zj2QU14DLwmgRfs.png" alt="image.png"></p>
<h3 id="Multi-Head-Attention"><a href="#Multi-Head-Attention" class="headerlink" title="Multi-Head Attention"></a>Multi-Head Attention</h3><p>在上一步，我们已经知道怎么通过 Self-Attention 计算得到输出矩阵 Z，而 Multi-Head Attention 是由多个 Self-Attention 组合形成的，下图是论文中 Multi-Head Attention 的结构图。<br><img src="https://s2.loli.net/2024/10/30/XNrobGZMkgOeB57.png" alt="image.png"></p>
<p>从上图可以看到 Multi-Head Attention 包含多个 Self-Attention 层，首先将输入X分别传递到 h 个不同的 Self-Attention 中，计算得到 h 个输出矩阵Z。下图是 h&#x3D;8 时候的情况，此时会得到 8 个输出矩阵Z。<br><img src="https://s2.loli.net/2024/10/30/W8hdnBT5bDufAcC.png" alt="image.png"></p>
<p>得到 8 个输出矩阵$Z_1$  到 $Z_8$ 之后，Multi-Head Attention 将它们拼接在一起 (Concat)，然后传入一个Linear层，得到 Multi-Head Attention 最终的输出Z。<br><img src="https://s2.loli.net/2024/10/30/8XiUxMfk7pomsh6.png" alt="image.png"></p>
<p>可以看到 Multi-Head Attention 输出的矩阵Z与其输入的矩阵X的维度是一样的。</p>
<h2 id="Encoder-结构"><a href="#Encoder-结构" class="headerlink" title="Encoder 结构"></a>Encoder 结构</h2><p><img src="https://s2.loli.net/2024/10/30/Lpc4W7BTfHMbJmo.png" alt="image.png"></p>
<p>上图红色部分是 Transformer 的 Encoder block 结构，可以看到是由 <strong>Multi-Head Attention, Add &amp; Norm, Feed Forward, Add &amp; Norm</strong> 组成的。刚刚已经了解了 Multi-Head Attention 的计算过程，现在了解一下 Add &amp; Norm 和 Feed Forward 部分。</p>
<h3 id="Add-Norm"><a href="#Add-Norm" class="headerlink" title="Add &amp; Norm"></a>Add &amp; Norm</h3><p>Add &amp; Norm 层由 Add 和 Norm 两部分组成，其计算公式如下：<br><img src="https://s2.loli.net/2024/10/30/x81oylVfXpgPtz6.png" alt="image.png"></p>
<p>其中 X表示 Multi-Head Attention 或者 Feed Forward 的输入，MultiHeadAttention(X) 和 FeedForward(X) 表示输出 (输出与输入 X 维度是一样的，所以可以相加)。<br>Add指 X+MultiHeadAttention(X)，是一种残差连接，通常用于解决多层网络训练的问题，可以让网络只关注当前差异的部分，在 ResNet 中经常用到：<br><img src="https://s2.loli.net/2024/10/30/FJDIuj3PkiVSe9Q.png" alt="image.png"></p>
<p>Norm指 Layer Normalization，通常用于 RNN 结构，Layer Normalization 会将每一层神经元的输入都转成均值方差都一样的，这样可以加快收敛。</p>
<h3 id="Feed-Forward"><a href="#Feed-Forward" class="headerlink" title="Feed Forward"></a>Feed Forward</h3><p>Feed Forward 层比较简单，是一个两层的全连接层，第一层的激活函数为 Relu，第二层不使用激活函数，对应的公式如下。<br><img src="https://s2.loli.net/2024/10/30/AbVZj3eovG6q5pB.png" alt="image.png"></p>
<p>X是输入，Feed Forward 最终得到的输出矩阵的维度与X一致。</p>
<h3 id="组成-Encoder"><a href="#组成-Encoder" class="headerlink" title="组成 Encoder"></a>组成 Encoder</h3><p>通过上面描述的 Multi-Head Attention, Fed Forward, Add &amp; Norm 就可以造出一个 Encoder block，Encoder block 接收输入矩阵 $X_{(n×d)}$  ，并输出一个矩阵 $O_{（n×d）}$ 。通过多个 Encoder block 叠加就可以组成 Encoder。</p>
<p>第一个 Encoder block 的输入为句子单词的表示向量矩阵，后续 Encoder block 的输入是前一个 Encoder block 的输出，最后一个 Encoder block 输出的矩阵就是<strong>编码信息矩阵 C</strong>，这一矩阵后续会用到 Decoder 中。</p>
<p><img src="https://s2.loli.net/2024/10/30/JiebPr4VuzdHqYL.png" alt="image.png"></p>
<h2 id="Decoder-结构"><a href="#Decoder-结构" class="headerlink" title="Decoder 结构"></a>Decoder 结构</h2><p><img src="https://s2.loli.net/2024/10/30/PsgNlJBQ3Eh1AX2.png" alt="image.png"></p>
<p>上图红色部分为 Transformer 的 Decoder block 结构，与 Encoder block 相似，但是存在一些区别：</p>
<ul>
<li>包含两个 Multi-Head Attention 层。</li>
<li>第一个 Multi-Head Attention 层采用了 Masked 操作。</li>
<li>第二个 Multi-Head Attention 层的K, V矩阵使用 Encoder 的编码信息矩阵C进行计算，而Q使用上一个 Decoder block 的输出计算。</li>
<li>最后有一个 Softmax 层计算下一个翻译单词的概率。</li>
</ul>
<h3 id="第一个-Multi-Head-Attention"><a href="#第一个-Multi-Head-Attention" class="headerlink" title="第一个 Multi-Head Attention"></a>第一个 Multi-Head Attention</h3><p>Decoder block 的第一个 Multi-Head Attention 采用了 Masked 操作，因为在翻译的过程中是顺序翻译的，即翻译完第 i 个单词，才可以翻译第 i+1 个单词。通过 Masked 操作可以防止第 i 个单词知道 i+1 个单词之后的信息。下面以 “我有一只猫” 翻译成 “I have a cat” 为例，了解一下 Masked 操作。</p>
<p>下面的描述中使用了类似 Teacher Forcing 的概念，不熟悉 Teacher Forcing 的童鞋可以参考以下上一篇文章Seq2Seq 模型详解。在 Decoder 的时候，是需要根据之前的翻译，求解当前最有可能的翻译，如下图所示。首先根据输入 “Begin” 预测出第一个单词为 “I”，然后根据输入 “Begin I” 预测下一个单词 “have”。</p>
<p><img src="https://s2.loli.net/2024/10/30/aTIBEvfKjVuOGZU.png" alt="image.png"></p>
<p>Decoder 可以在训练的过程中使用 Teacher Forcing 并且并行化训练，即将正确的单词序列 ( I have a cat) 和对应输出 (I have a cat ) 传递到 Decoder。那么在预测第 i 个输出时，就要将第 i+1 之后的单词掩盖住，<strong>注意 Mask 操作是在 Self-Attention 的 Softmax 之前使用的，下面用 0 1 2 3 4 5 分别表示</strong> “ I have a cat “。</p>
<p>第一步：是 Decoder 的输入矩阵和 <strong>Mask</strong> 矩阵，输入矩阵包含 “ I have a cat” (0, 1, 2, 3, 4) 五个单词的表示向量，<strong>Mask</strong> 是一个 5×5 的矩阵。在 <strong>Mask</strong> 可以发现单词 0 只能使用单词 0 的信息，而单词 1 可以使用单词 0, 1 的信息，即只能使用之前的信息。</p>
<p><img src="https://s2.loli.net/2024/10/30/EiaCLbpUQRrZhS9.png" alt="image.png"></p>
<p>第二步： 接下来的操作和之前的 Self-Attention 一样，通过输入矩阵X计算得到Q,K,V矩阵。然后计算Q和  $K^T$的乘积Q  $K^T$  。<br><img src="https://s2.loli.net/2024/10/30/FWhNjz1ldAkvPyG.png" alt="image.png"></p>
<p>第三步： 在得到  之后需要进行 Softmax，计算 attention score，我们在 Softmax 之前需要使用Mask矩阵遮挡住每一个单词之后的信息，遮挡操作如下：<br><img src="https://s2.loli.net/2024/10/30/Xdi7cNgyRDkxzvW.png" alt="image.png"><br>得到 Mask  Q $K^T$之后在 Mask  Q $K^T$上进行 Softmax，每一行的和都为 1。但是单词 0 在单词 1, 2, 3, 4 上的 attention score 都为 0。</p>
<p>第四步：使用 Mask Q $K^T$与矩阵 V相乘，得到输出 Z，则单词 1 的输出向量 $Z_1$ 是只包含单词 1 信息的。<br><img src="https://s2.loli.net/2024/10/30/2sOiw6lECWVMr1a.png" alt="image.png"></p>
<p>第五步： 通过上述步骤就可以得到一个 Mask Self-Attention 的输出矩阵 $Z_i$  ，然后和 Encoder 类似，通过 Multi-Head Attention 拼接多个输出 $Z_i$ 然后计算得到第一个 Multi-Head Attention 的输出Z，Z与输入X维度一样。</p>
<h3 id="第二个-Multi-Head-Attention"><a href="#第二个-Multi-Head-Attention" class="headerlink" title="第二个 Multi-Head Attention"></a>第二个 Multi-Head Attention</h3><p>Decoder block 第二个 Multi-Head Attention 变化不大， 主要的区别在于其中 Self-Attention 的 K, V矩阵不是使用 上一个 Decoder block 的输出计算的，而是使用 Encoder 的编码信息矩阵 C 计算的。</p>
<p>根据 Encoder 的输出 C计算得到 K, V，根据上一个 Decoder block 的输出 Z 计算 Q (如果是第一个 Decoder block 则使用输入矩阵 X 进行计算)，后续的计算方法与之前描述的一致。</p>
<p>这样做的好处是在 Decoder 的时候，每一位单词都可以利用到 Encoder 所有单词的信息 (这些信息无需 Mask)。</p>
<h3 id="Softmax-预测输出单词"><a href="#Softmax-预测输出单词" class="headerlink" title="Softmax 预测输出单词"></a>Softmax 预测输出单词</h3><p>Decoder block 最后的部分是利用 Softmax 预测下一个单词，在之前的网络层我们可以得到一个最终的输出 Z，因为 Mask 的存在，使得单词 0 的输出 Z0 只包含单词 0 的信息，如下：</p>
<p><img src="https://s2.loli.net/2024/10/30/zOr64NapThSgBjs.png" alt="image.png"></p>
<p>Softmax 根据输出矩阵的每一行预测下一个单词：<br><img src="https://s2.loli.net/2024/10/30/2DjvHPpSxyLgm7z.png" alt="image.png"></p>
<p>这就是 Decoder block 的定义，与 Encoder 一样，Decoder 是由多个 Decoder block 组合而成。</p>
<hr>
<ul>
<li>Transformer 与 RNN 不同，可以比较好地并行训练。</li>
<li>Transformer 本身是不能利用单词的顺序信息的，因此需要在输入中添加位置 Embedding，否则 Transformer 就是一个词袋模型了。</li>
<li>Transformer 的重点是 Self-Attention 结构，其中用到的 Q, K, V矩阵通过输出进行线性变换得到。</li>
<li>Transformer 中 Multi-Head Attention 中有多个 Self-Attention，可以捕获单词之间多种维度上的相关系数 attention score。</li>
</ul>
<hr>
<p>来源：<a href="https://www.cnblogs.com/kongen/p/18088002">Transformer模型详解（图解最完整版）</a></p>
]]></content>
  </entry>
</search>
